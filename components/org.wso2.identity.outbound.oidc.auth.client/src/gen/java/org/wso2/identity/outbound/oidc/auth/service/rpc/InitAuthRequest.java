/*
 * Copyright (c) 2022, WSO2 LLC. (http://www.wso2.com).
 *
 * WSO2 LLC. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: OutboundOIDCService.proto

package org.wso2.identity.outbound.oidc.auth.service.rpc;

/**
 * Protobuf type {@code org.wso2.identity.outbound.oidc.auth.service.rpc.InitAuthRequest}
 */
public  final class InitAuthRequest extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:org.wso2.identity.outbound.oidc.auth.service.rpc.InitAuthRequest)
    InitAuthRequestOrBuilder {
  // Use InitAuthRequest.newBuilder() to construct.
  private InitAuthRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private InitAuthRequest() {
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
  }
  private InitAuthRequest(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    int mutable_bitField0_ = 0;
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!input.skipField(tag)) {
              done = true;
            }
            break;
          }
          case 10: {
            org.wso2.identity.outbound.oidc.auth.service.rpc.AuthenticationContext.Builder subBuilder = null;
            if (authenticationContext_ != null) {
              subBuilder = authenticationContext_.toBuilder();
            }
            authenticationContext_ = input.readMessage(org.wso2.identity.outbound.oidc.auth.service.rpc.AuthenticationContext.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(authenticationContext_);
              authenticationContext_ = subBuilder.buildPartial();
            }

            break;
          }
          case 18: {
            org.wso2.identity.outbound.oidc.auth.service.rpc.Request.Builder subBuilder = null;
            if (request_ != null) {
              subBuilder = request_.toBuilder();
            }
            request_ = input.readMessage(org.wso2.identity.outbound.oidc.auth.service.rpc.Request.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(request_);
              request_ = subBuilder.buildPartial();
            }

            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return org.wso2.identity.outbound.oidc.auth.service.rpc.OutboundOIDCServiceOuterClass.internal_static_org_wso2_identity_outbound_oidc_auth_service_rpc_InitAuthRequest_descriptor;
  }

  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return org.wso2.identity.outbound.oidc.auth.service.rpc.OutboundOIDCServiceOuterClass.internal_static_org_wso2_identity_outbound_oidc_auth_service_rpc_InitAuthRequest_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            org.wso2.identity.outbound.oidc.auth.service.rpc.InitAuthRequest.class, org.wso2.identity.outbound.oidc.auth.service.rpc.InitAuthRequest.Builder.class);
  }

  public static final int AUTHENTICATIONCONTEXT_FIELD_NUMBER = 1;
  private org.wso2.identity.outbound.oidc.auth.service.rpc.AuthenticationContext authenticationContext_;
  /**
   * <code>.org.wso2.identity.outbound.oidc.auth.service.rpc.AuthenticationContext authenticationContext = 1;</code>
   */
  public boolean hasAuthenticationContext() {
    return authenticationContext_ != null;
  }
  /**
   * <code>.org.wso2.identity.outbound.oidc.auth.service.rpc.AuthenticationContext authenticationContext = 1;</code>
   */
  public org.wso2.identity.outbound.oidc.auth.service.rpc.AuthenticationContext getAuthenticationContext() {
    return authenticationContext_ == null ? org.wso2.identity.outbound.oidc.auth.service.rpc.AuthenticationContext.getDefaultInstance() : authenticationContext_;
  }
  /**
   * <code>.org.wso2.identity.outbound.oidc.auth.service.rpc.AuthenticationContext authenticationContext = 1;</code>
   */
  public org.wso2.identity.outbound.oidc.auth.service.rpc.AuthenticationContextOrBuilder getAuthenticationContextOrBuilder() {
    return getAuthenticationContext();
  }

  public static final int REQUEST_FIELD_NUMBER = 2;
  private org.wso2.identity.outbound.oidc.auth.service.rpc.Request request_;
  /**
   * <code>.org.wso2.identity.outbound.oidc.auth.service.rpc.Request request = 2;</code>
   */
  public boolean hasRequest() {
    return request_ != null;
  }
  /**
   * <code>.org.wso2.identity.outbound.oidc.auth.service.rpc.Request request = 2;</code>
   */
  public org.wso2.identity.outbound.oidc.auth.service.rpc.Request getRequest() {
    return request_ == null ? org.wso2.identity.outbound.oidc.auth.service.rpc.Request.getDefaultInstance() : request_;
  }
  /**
   * <code>.org.wso2.identity.outbound.oidc.auth.service.rpc.Request request = 2;</code>
   */
  public org.wso2.identity.outbound.oidc.auth.service.rpc.RequestOrBuilder getRequestOrBuilder() {
    return getRequest();
  }

  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (authenticationContext_ != null) {
      output.writeMessage(1, getAuthenticationContext());
    }
    if (request_ != null) {
      output.writeMessage(2, getRequest());
    }
  }

  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (authenticationContext_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getAuthenticationContext());
    }
    if (request_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getRequest());
    }
    memoizedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof org.wso2.identity.outbound.oidc.auth.service.rpc.InitAuthRequest)) {
      return super.equals(obj);
    }
    org.wso2.identity.outbound.oidc.auth.service.rpc.InitAuthRequest other = (org.wso2.identity.outbound.oidc.auth.service.rpc.InitAuthRequest) obj;

    boolean result = true;
    result = result && (hasAuthenticationContext() == other.hasAuthenticationContext());
    if (hasAuthenticationContext()) {
      result = result && getAuthenticationContext()
          .equals(other.getAuthenticationContext());
    }
    result = result && (hasRequest() == other.hasRequest());
    if (hasRequest()) {
      result = result && getRequest()
          .equals(other.getRequest());
    }
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasAuthenticationContext()) {
      hash = (37 * hash) + AUTHENTICATIONCONTEXT_FIELD_NUMBER;
      hash = (53 * hash) + getAuthenticationContext().hashCode();
    }
    if (hasRequest()) {
      hash = (37 * hash) + REQUEST_FIELD_NUMBER;
      hash = (53 * hash) + getRequest().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static org.wso2.identity.outbound.oidc.auth.service.rpc.InitAuthRequest parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.wso2.identity.outbound.oidc.auth.service.rpc.InitAuthRequest parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.wso2.identity.outbound.oidc.auth.service.rpc.InitAuthRequest parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.wso2.identity.outbound.oidc.auth.service.rpc.InitAuthRequest parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.wso2.identity.outbound.oidc.auth.service.rpc.InitAuthRequest parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.wso2.identity.outbound.oidc.auth.service.rpc.InitAuthRequest parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.wso2.identity.outbound.oidc.auth.service.rpc.InitAuthRequest parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.wso2.identity.outbound.oidc.auth.service.rpc.InitAuthRequest parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.wso2.identity.outbound.oidc.auth.service.rpc.InitAuthRequest parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static org.wso2.identity.outbound.oidc.auth.service.rpc.InitAuthRequest parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.wso2.identity.outbound.oidc.auth.service.rpc.InitAuthRequest parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.wso2.identity.outbound.oidc.auth.service.rpc.InitAuthRequest parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.wso2.identity.outbound.oidc.auth.service.rpc.InitAuthRequest prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code org.wso2.identity.outbound.oidc.auth.service.rpc.InitAuthRequest}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:org.wso2.identity.outbound.oidc.auth.service.rpc.InitAuthRequest)
      org.wso2.identity.outbound.oidc.auth.service.rpc.InitAuthRequestOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.wso2.identity.outbound.oidc.auth.service.rpc.OutboundOIDCServiceOuterClass.internal_static_org_wso2_identity_outbound_oidc_auth_service_rpc_InitAuthRequest_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.wso2.identity.outbound.oidc.auth.service.rpc.OutboundOIDCServiceOuterClass.internal_static_org_wso2_identity_outbound_oidc_auth_service_rpc_InitAuthRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.wso2.identity.outbound.oidc.auth.service.rpc.InitAuthRequest.class, org.wso2.identity.outbound.oidc.auth.service.rpc.InitAuthRequest.Builder.class);
    }

    // Construct using org.wso2.identity.outbound.oidc.auth.service.rpc.InitAuthRequest.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    public Builder clear() {
      super.clear();
      if (authenticationContextBuilder_ == null) {
        authenticationContext_ = null;
      } else {
        authenticationContext_ = null;
        authenticationContextBuilder_ = null;
      }
      if (requestBuilder_ == null) {
        request_ = null;
      } else {
        request_ = null;
        requestBuilder_ = null;
      }
      return this;
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return org.wso2.identity.outbound.oidc.auth.service.rpc.OutboundOIDCServiceOuterClass.internal_static_org_wso2_identity_outbound_oidc_auth_service_rpc_InitAuthRequest_descriptor;
    }

    public org.wso2.identity.outbound.oidc.auth.service.rpc.InitAuthRequest getDefaultInstanceForType() {
      return org.wso2.identity.outbound.oidc.auth.service.rpc.InitAuthRequest.getDefaultInstance();
    }

    public org.wso2.identity.outbound.oidc.auth.service.rpc.InitAuthRequest build() {
      org.wso2.identity.outbound.oidc.auth.service.rpc.InitAuthRequest result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public org.wso2.identity.outbound.oidc.auth.service.rpc.InitAuthRequest buildPartial() {
      org.wso2.identity.outbound.oidc.auth.service.rpc.InitAuthRequest result = new org.wso2.identity.outbound.oidc.auth.service.rpc.InitAuthRequest(this);
      if (authenticationContextBuilder_ == null) {
        result.authenticationContext_ = authenticationContext_;
      } else {
        result.authenticationContext_ = authenticationContextBuilder_.build();
      }
      if (requestBuilder_ == null) {
        result.request_ = request_;
      } else {
        result.request_ = requestBuilder_.build();
      }
      onBuilt();
      return result;
    }

    public Builder clone() {
      return (Builder) super.clone();
    }
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.setField(field, value);
    }
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof org.wso2.identity.outbound.oidc.auth.service.rpc.InitAuthRequest) {
        return mergeFrom((org.wso2.identity.outbound.oidc.auth.service.rpc.InitAuthRequest)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(org.wso2.identity.outbound.oidc.auth.service.rpc.InitAuthRequest other) {
      if (other == org.wso2.identity.outbound.oidc.auth.service.rpc.InitAuthRequest.getDefaultInstance()) return this;
      if (other.hasAuthenticationContext()) {
        mergeAuthenticationContext(other.getAuthenticationContext());
      }
      if (other.hasRequest()) {
        mergeRequest(other.getRequest());
      }
      onChanged();
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      org.wso2.identity.outbound.oidc.auth.service.rpc.InitAuthRequest parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (org.wso2.identity.outbound.oidc.auth.service.rpc.InitAuthRequest) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private org.wso2.identity.outbound.oidc.auth.service.rpc.AuthenticationContext authenticationContext_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        org.wso2.identity.outbound.oidc.auth.service.rpc.AuthenticationContext, org.wso2.identity.outbound.oidc.auth.service.rpc.AuthenticationContext.Builder, org.wso2.identity.outbound.oidc.auth.service.rpc.AuthenticationContextOrBuilder> authenticationContextBuilder_;
    /**
     * <code>.org.wso2.identity.outbound.oidc.auth.service.rpc.AuthenticationContext authenticationContext = 1;</code>
     */
    public boolean hasAuthenticationContext() {
      return authenticationContextBuilder_ != null || authenticationContext_ != null;
    }
    /**
     * <code>.org.wso2.identity.outbound.oidc.auth.service.rpc.AuthenticationContext authenticationContext = 1;</code>
     */
    public org.wso2.identity.outbound.oidc.auth.service.rpc.AuthenticationContext getAuthenticationContext() {
      if (authenticationContextBuilder_ == null) {
        return authenticationContext_ == null ? org.wso2.identity.outbound.oidc.auth.service.rpc.AuthenticationContext.getDefaultInstance() : authenticationContext_;
      } else {
        return authenticationContextBuilder_.getMessage();
      }
    }
    /**
     * <code>.org.wso2.identity.outbound.oidc.auth.service.rpc.AuthenticationContext authenticationContext = 1;</code>
     */
    public Builder setAuthenticationContext(org.wso2.identity.outbound.oidc.auth.service.rpc.AuthenticationContext value) {
      if (authenticationContextBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        authenticationContext_ = value;
        onChanged();
      } else {
        authenticationContextBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <code>.org.wso2.identity.outbound.oidc.auth.service.rpc.AuthenticationContext authenticationContext = 1;</code>
     */
    public Builder setAuthenticationContext(
        org.wso2.identity.outbound.oidc.auth.service.rpc.AuthenticationContext.Builder builderForValue) {
      if (authenticationContextBuilder_ == null) {
        authenticationContext_ = builderForValue.build();
        onChanged();
      } else {
        authenticationContextBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <code>.org.wso2.identity.outbound.oidc.auth.service.rpc.AuthenticationContext authenticationContext = 1;</code>
     */
    public Builder mergeAuthenticationContext(org.wso2.identity.outbound.oidc.auth.service.rpc.AuthenticationContext value) {
      if (authenticationContextBuilder_ == null) {
        if (authenticationContext_ != null) {
          authenticationContext_ =
            org.wso2.identity.outbound.oidc.auth.service.rpc.AuthenticationContext.newBuilder(authenticationContext_).mergeFrom(value).buildPartial();
        } else {
          authenticationContext_ = value;
        }
        onChanged();
      } else {
        authenticationContextBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <code>.org.wso2.identity.outbound.oidc.auth.service.rpc.AuthenticationContext authenticationContext = 1;</code>
     */
    public Builder clearAuthenticationContext() {
      if (authenticationContextBuilder_ == null) {
        authenticationContext_ = null;
        onChanged();
      } else {
        authenticationContext_ = null;
        authenticationContextBuilder_ = null;
      }

      return this;
    }
    /**
     * <code>.org.wso2.identity.outbound.oidc.auth.service.rpc.AuthenticationContext authenticationContext = 1;</code>
     */
    public org.wso2.identity.outbound.oidc.auth.service.rpc.AuthenticationContext.Builder getAuthenticationContextBuilder() {
      
      onChanged();
      return getAuthenticationContextFieldBuilder().getBuilder();
    }
    /**
     * <code>.org.wso2.identity.outbound.oidc.auth.service.rpc.AuthenticationContext authenticationContext = 1;</code>
     */
    public org.wso2.identity.outbound.oidc.auth.service.rpc.AuthenticationContextOrBuilder getAuthenticationContextOrBuilder() {
      if (authenticationContextBuilder_ != null) {
        return authenticationContextBuilder_.getMessageOrBuilder();
      } else {
        return authenticationContext_ == null ?
            org.wso2.identity.outbound.oidc.auth.service.rpc.AuthenticationContext.getDefaultInstance() : authenticationContext_;
      }
    }
    /**
     * <code>.org.wso2.identity.outbound.oidc.auth.service.rpc.AuthenticationContext authenticationContext = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.wso2.identity.outbound.oidc.auth.service.rpc.AuthenticationContext, org.wso2.identity.outbound.oidc.auth.service.rpc.AuthenticationContext.Builder, org.wso2.identity.outbound.oidc.auth.service.rpc.AuthenticationContextOrBuilder> 
        getAuthenticationContextFieldBuilder() {
      if (authenticationContextBuilder_ == null) {
        authenticationContextBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.wso2.identity.outbound.oidc.auth.service.rpc.AuthenticationContext, org.wso2.identity.outbound.oidc.auth.service.rpc.AuthenticationContext.Builder, org.wso2.identity.outbound.oidc.auth.service.rpc.AuthenticationContextOrBuilder>(
                getAuthenticationContext(),
                getParentForChildren(),
                isClean());
        authenticationContext_ = null;
      }
      return authenticationContextBuilder_;
    }

    private org.wso2.identity.outbound.oidc.auth.service.rpc.Request request_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        org.wso2.identity.outbound.oidc.auth.service.rpc.Request, org.wso2.identity.outbound.oidc.auth.service.rpc.Request.Builder, org.wso2.identity.outbound.oidc.auth.service.rpc.RequestOrBuilder> requestBuilder_;
    /**
     * <code>.org.wso2.identity.outbound.oidc.auth.service.rpc.Request request = 2;</code>
     */
    public boolean hasRequest() {
      return requestBuilder_ != null || request_ != null;
    }
    /**
     * <code>.org.wso2.identity.outbound.oidc.auth.service.rpc.Request request = 2;</code>
     */
    public org.wso2.identity.outbound.oidc.auth.service.rpc.Request getRequest() {
      if (requestBuilder_ == null) {
        return request_ == null ? org.wso2.identity.outbound.oidc.auth.service.rpc.Request.getDefaultInstance() : request_;
      } else {
        return requestBuilder_.getMessage();
      }
    }
    /**
     * <code>.org.wso2.identity.outbound.oidc.auth.service.rpc.Request request = 2;</code>
     */
    public Builder setRequest(org.wso2.identity.outbound.oidc.auth.service.rpc.Request value) {
      if (requestBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        request_ = value;
        onChanged();
      } else {
        requestBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <code>.org.wso2.identity.outbound.oidc.auth.service.rpc.Request request = 2;</code>
     */
    public Builder setRequest(
        org.wso2.identity.outbound.oidc.auth.service.rpc.Request.Builder builderForValue) {
      if (requestBuilder_ == null) {
        request_ = builderForValue.build();
        onChanged();
      } else {
        requestBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <code>.org.wso2.identity.outbound.oidc.auth.service.rpc.Request request = 2;</code>
     */
    public Builder mergeRequest(org.wso2.identity.outbound.oidc.auth.service.rpc.Request value) {
      if (requestBuilder_ == null) {
        if (request_ != null) {
          request_ =
            org.wso2.identity.outbound.oidc.auth.service.rpc.Request.newBuilder(request_).mergeFrom(value).buildPartial();
        } else {
          request_ = value;
        }
        onChanged();
      } else {
        requestBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <code>.org.wso2.identity.outbound.oidc.auth.service.rpc.Request request = 2;</code>
     */
    public Builder clearRequest() {
      if (requestBuilder_ == null) {
        request_ = null;
        onChanged();
      } else {
        request_ = null;
        requestBuilder_ = null;
      }

      return this;
    }
    /**
     * <code>.org.wso2.identity.outbound.oidc.auth.service.rpc.Request request = 2;</code>
     */
    public org.wso2.identity.outbound.oidc.auth.service.rpc.Request.Builder getRequestBuilder() {
      
      onChanged();
      return getRequestFieldBuilder().getBuilder();
    }
    /**
     * <code>.org.wso2.identity.outbound.oidc.auth.service.rpc.Request request = 2;</code>
     */
    public org.wso2.identity.outbound.oidc.auth.service.rpc.RequestOrBuilder getRequestOrBuilder() {
      if (requestBuilder_ != null) {
        return requestBuilder_.getMessageOrBuilder();
      } else {
        return request_ == null ?
            org.wso2.identity.outbound.oidc.auth.service.rpc.Request.getDefaultInstance() : request_;
      }
    }
    /**
     * <code>.org.wso2.identity.outbound.oidc.auth.service.rpc.Request request = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.wso2.identity.outbound.oidc.auth.service.rpc.Request, org.wso2.identity.outbound.oidc.auth.service.rpc.Request.Builder, org.wso2.identity.outbound.oidc.auth.service.rpc.RequestOrBuilder> 
        getRequestFieldBuilder() {
      if (requestBuilder_ == null) {
        requestBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.wso2.identity.outbound.oidc.auth.service.rpc.Request, org.wso2.identity.outbound.oidc.auth.service.rpc.Request.Builder, org.wso2.identity.outbound.oidc.auth.service.rpc.RequestOrBuilder>(
                getRequest(),
                getParentForChildren(),
                isClean());
        request_ = null;
      }
      return requestBuilder_;
    }
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }

    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }


    // @@protoc_insertion_point(builder_scope:org.wso2.identity.outbound.oidc.auth.service.rpc.InitAuthRequest)
  }

  // @@protoc_insertion_point(class_scope:org.wso2.identity.outbound.oidc.auth.service.rpc.InitAuthRequest)
  private static final org.wso2.identity.outbound.oidc.auth.service.rpc.InitAuthRequest DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new org.wso2.identity.outbound.oidc.auth.service.rpc.InitAuthRequest();
  }

  public static org.wso2.identity.outbound.oidc.auth.service.rpc.InitAuthRequest getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<InitAuthRequest>
      PARSER = new com.google.protobuf.AbstractParser<InitAuthRequest>() {
    public InitAuthRequest parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
        return new InitAuthRequest(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<InitAuthRequest> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<InitAuthRequest> getParserForType() {
    return PARSER;
  }

  public org.wso2.identity.outbound.oidc.auth.service.rpc.InitAuthRequest getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

